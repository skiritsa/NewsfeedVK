//
//  NewsfeedInteractor.swift
//  VKNewsFeed
//
//  Created by Alex Kiritsa on 26.03.2020.
//  Copyright (c) 2020 Alex Kiritsa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsfeedBusinessLogic {
    func makeRequest(request: Newsfeed.Model.Request.RequestType)
}

protocol NewsfeedDataStore {
    //var name: String { get set }
}

class NewsfeedInteractor: NewsfeedBusinessLogic, NewsfeedDataStore {
    var presenter: NewsfeedPresentationLogic?
    var worker: NewsfeedWorker?
    
    // MARK: Do something
    
    func makeRequest(request: Newsfeed.Model.Request.RequestType) {
        if worker == nil {
            worker = NewsfeedWorker()
        }
        
        switch request {
        case .getNewsFeed:
            worker?.getFeed(completion: { [weak self] (revealedPostIds, feed) in
                self?.presenter?.presentData(response: .presentNewsfeed(feed: feed, revealedPostIds: revealedPostIds))
            })
        case .getUser:
            worker?.getUser(completion: { [weak self] (user) in
                self?.presenter?.presentData(response: .presentUserInfo(user: user))
            })
        case .revealPostIds(postId: let postId):
            worker?.revealPostIds(forPostId: postId, completion: { (revealedPostIds, feed) in
                self.presenter?.presentData(response: .presentNewsfeed(feed: feed, revealedPostIds: revealedPostIds))
            })
        case .getNextBatch:
            self.presenter?.presentData(response: .presentFooterLoader)
            worker?.getNextBatch(completion: { (revealedPostIds, feed) in
                self.presenter?.presentData(response: .presentNewsfeed(feed: feed, revealedPostIds: revealedPostIds))
            })
        }
    }
}
